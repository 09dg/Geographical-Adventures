#pragma kernel CSMain

#include "Assets/Scripts/Shader Common/GeoMath.hlsl"

Texture2D<float> HeightMap;
Texture2D DistanceMap;
SamplerState height_linear_clamp_sampler;
AppendStructuredBuffer<float4> Points;
AppendStructuredBuffer<float4> EdgePoints;
float3 axisA;
float3 axisB;
float3 normal;
uint resolution;
float errorThreshold;
uint gridCellSize;

float2 startT;
float2 endT;

// From http://mathproofs.blogspot.com/2005/07/mapping-cube-to-sphere.html
float3 pointOnCubeToPointOnSphere(float3 p)
{
	float x2 = p.x * p.x / 2;
	float y2 = p.y * p.y / 2;
	float z2 = p.z * p.z / 2;
	float x = p.x * sqrt(1 - y2 - z2 + (p.y * p.y * p.z * p.z) / 3);
	float y = p.y * sqrt(1 - z2 - x2 + (p.x * p.x * p.z * p.z) / 3);
	float z = p.z * sqrt(1 - x2 - y2 + (p.x * p.x * p.y * p.y) / 3);
	return float3(x, y, z);

}


// Thanks to http://petrocket.blogspot.com/2010/04/sphere-to-cube-mapping.html
float3 CubifyFace(float3 p)
{
	const float inverseSqrt2 = 0.70710676908493042f;

	float a2 = p.x * p.x * 2.0f;
	float b2 = p.z * p.z * 2.0f;
	float inner = -a2 + b2 - 3;
	float innersqrt = -sqrt((inner * inner) - 12.0f * a2);

	if (p.x != 0)
	{
		p.x = min(1, sqrt(innersqrt + a2 - b2 + 3.0f) * inverseSqrt2) * sign(p.x);
	}

	if (p.z != 0)
	{
		p.z = min(1, sqrt(innersqrt - a2 + b2 + 3.0f) * inverseSqrt2) * sign(p.z);
	}

	// Top/bottom face
	p.y = sign(p.y);

	return p;
}

float3 SpherePointToCubePoint(float3 p)
{
	float3 a = abs(p);

	if (a.y >= a.x && a.y >= a.z)
	{
		p = CubifyFace(p);
	}
	else if (a.x >= a.y && a.x >= a.z)
	{
		p = CubifyFace(p.yxz).yxz;//
	}
	else
	{
		p = CubifyFace(p.xzy).xzy;
	}

	return p;

}

float getHeight(float2 texCoord) {
	return HeightMap.SampleLevel(height_linear_clamp_sampler, texCoord, 0);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= resolution || id.y >= resolution) { return; }

	
	bool isGridPoint = id.x % gridCellSize == 0 && id.y % gridCellSize == 0;
	bool isEdgePoint = id.x == 0 || id.x == resolution-1 || id.y == 0 || id.y == resolution-1;

	float gridStepSize = 1 / (resolution - 1.0);
	float2 t = lerp(startT, endT, id.xy * gridStepSize);
	float3 cubePoint = normal + (t.x - 0.5f) * 2 * axisA + (t.y - 0.5f) * 2 * axisB;
	float3 spherePoint = pointOnCubeToPointOnSphere(cubePoint);

	// Calculate uv step size (height map uses equirectangular projection, which means step size is dependent on latitude)
	float2 texCoord = pointToUV(spherePoint);
	float3 nextCubePoint = cubePoint + axisA * gridStepSize;
	float3 nextSpherePoint = pointOnCubeToPointOnSphere(nextCubePoint);
	float2 nextTexCoord = pointToUV(nextSpherePoint);
	float2 deltaTexCoord = abs(texCoord - nextTexCoord);
	float texCoordStepSize = max(deltaTexCoord.x, deltaTexCoord.y);
	texCoordStepSize = 0.001; // test

	
	float h = getHeight(texCoord);
	float hw = getHeight(texCoord + float2(-1, 0) * texCoordStepSize);
	float he = getHeight(texCoord + float2(1, 0) * texCoordStepSize);
	float hn = getHeight(texCoord + float2(0, 1) * texCoordStepSize);
	float hs = getHeight(texCoord + float2(0, -1) * texCoordStepSize);

	float avg = (hw + he + hn + hs) / 4;
	float error = abs(h - avg);
	
	float d0 = abs(h-hw);
	float d1 = abs(h-he);
	float d2 = abs(h-hn);
	float d3 = abs(h-hs);
	error = max(d0, max(d1, max(d2, d3)));
	
	//error = 0;
	float4 dstTest = DistanceMap.SampleLevel(height_linear_clamp_sampler, texCoord, 0);
	if (!isEdgePoint) {
		
		float2 nearestCoastUV = saturate(dstTest.xy / float2(16384, 8192));

		float2 dirToCoast = normalize(nearestCoastUV - texCoord);
		float shoreHeight = getHeight(nearestCoastUV + dirToCoast * 0.001);
		//if (shoreHeight > 0.05)
		{
			float3 nearestCoastPos = uvToPointOnSphere(nearestCoastUV);
			float3 nearestCoastPosOnCube = SpherePointToCubePoint(nearestCoastPos);
			float dstToNearestCoastPos = length(nearestCoastPosOnCube - cubePoint);
			if (dstToNearestCoastPos < gridStepSize / 2 && dstTest.z > 0) {
				Points.Append(float4(nearestCoastPosOnCube, 0));//
			}
		}
	}

	bool coastal = dstTest.z > 0 && dstTest.z < 15;

	if (((error >= errorThreshold || coastal) && ((id.x % 3 == 0 && id.y % 3 == 0)) || error >= errorThreshold * 8) || isGridPoint) {

		float4 p = float4(cubePoint, h);
		
		if (isEdgePoint) {
			EdgePoints.Append(p);
		}
		else {
			Points.Append(p);
		}
	}

}


