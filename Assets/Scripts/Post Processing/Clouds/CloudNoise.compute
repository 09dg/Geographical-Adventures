#pragma kernel CSMain
#include "Assets/Scripts/Shader Common/Math.hlsl"

RWTexture3D<float4> NoiseTexture;
uint size;

int worleyScale;
int seed;


// https://www.shadertoy.com/view/XlGcRh
// http://www.jcgt.org/published/0009/03/02/
float3 pcg3d(uint3 v) {

	v = v * 1664525u + 1013904223u;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	v ^= v >> 16u;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return (v / 4294967295.0) * 2 - 1;
}

float3 mod(float3 x, float y) {
	return x - y * floor(x/y);
}

float3 mod(float3 x, float3 y) {
	return x - y * floor(x/y);
}

// From: https://www.shadertoy.com/view/3dVXDc
// Gradient noise by iq (modified to be tileable)
float gradientNoise(float3 x, float freq)
{
	// grid
	float3 p = floor(x);
	float3 w = frac(x);
	
	// quintic interpolant
	float3 u = w * w * w * (w * (w * 6. - 15.) + 10.);
	
	// gradients
	float3 ga = pcg3d(mod(p + float3(0., 0., 0.), freq));
	float3 gb = pcg3d(mod(p + float3(1., 0., 0.), freq));
	float3 gc = pcg3d(mod(p + float3(0., 1., 0.), freq));
	float3 gd = pcg3d(mod(p + float3(1., 1., 0.), freq));
	float3 ge = pcg3d(mod(p + float3(0., 0., 1.), freq));
	float3 gf = pcg3d(mod(p + float3(1., 0., 1.), freq));
	float3 gg = pcg3d(mod(p + float3(0., 1., 1.), freq));
	float3 gh = pcg3d(mod(p + float3(1., 1., 1.), freq));
	
	// projections
	float va = dot(ga, w - float3(0., 0., 0.));
	float vb = dot(gb, w - float3(1., 0., 0.));
	float vc = dot(gc, w - float3(0., 1., 0.));
	float vd = dot(gd, w - float3(1., 1., 0.));
	float ve = dot(ge, w - float3(0., 0., 1.));
	float vf = dot(gf, w - float3(1., 0., 1.));
	float vg = dot(gg, w - float3(0., 1., 1.));
	float vh = dot(gh, w - float3(1., 1., 1.));
	
	// interpolation
	return va + 
		u.x * (vb - va) + 
		u.y * (vc - va) + 
		u.z * (ve - va) + 
		u.x * u.y * (va - vb - vc + vd) + 
		u.y * u.z * (va - vc - ve + vg) + 
		u.z * u.x * (va - vb - ve + vf) + 
		u.x * u.y * u.z * (-va + vb + vc - vd + ve - vf - vg + vh);
}

// Fbm for Perlin noise based on iq's blog
float perlinfbm(float3 p, float freq, int octaves)
{
	float G = exp2(-0.85);
	float amp = 1.0;
	float noise = 0.0;
	for (int i = 0; i < octaves; ++i)
	{
		noise += amp * gradientNoise(p * freq, freq);
		freq *= 2.0;
		amp *= G;
	}
	
	return noise;
}

// Tiling worley noise
float worley3D(float3 uvw, uint numCells, uint seed) {

	uint3 centreCellIndex = uvw * numCells;

	float minSqrDst = 1.#INF;
	float cellSize = 1.0 / numCells;

	for (int z = -1; z <= 1; z ++) {
		for (int y = -1; y <= 1; y ++) {
			for (int x = -1; x <= 1; x ++) {
				int3 cellIndex = centreCellIndex + int3(x, y, z);
				
				uint3 mirroredCellIndex = (cellIndex + numCells) % numCells;
				uint prngState = seed + mirroredCellIndex.z * numCells * numCells + mirroredCellIndex.y * numCells + mirroredCellIndex.x;
		
				float randX = randomValue(prngState);
				float randY = randomValue(prngState);
				float randZ = randomValue(prngState);
				float3 randomPoint = (cellIndex + float3(randX, randY, randZ)) * cellSize;

				float3 offsetToRandomPoint = randomPoint - uvw;
				float sqrDst = dot(offsetToRandomPoint, offsetToRandomPoint);
				minSqrDst = min(minSqrDst, sqrDst);
			}
		}
	}
	
	float minDst = (minSqrDst);
	return 1-minDst;
}

float worleyNoise(float3 texCoord, float freq, uint seed) {

	texCoord *= freq;
	int3 centreCellIndex = floor(texCoord);
	float3 currentPoint = frac(texCoord); // Coordinate relative to current cell
	
	float minDist = 1.#INF;

	for (int z = -1; z <= 1; z ++) {
		for (int y = -1; y <= 1; y ++) {
			for (int x = -1; x <= 1; x ++) {

				int3 cellOffset = int3(x, y, z);
			
				float3 cellSeed = mod(centreCellIndex + cellOffset, freq);
				// Get random point inside current cell
				float3 randomPoint = pcg3d(cellSeed + seed) * 0.5 + 0.5 + cellOffset;
				float3 offsetToRandomPoint = currentPoint - randomPoint;
				float sqrDst = dot(offsetToRandomPoint, offsetToRandomPoint);
				minDist = min(minDist, sqrDst);
			}
		}
	}
	
	return 1 - sqrt(minDist);
}


float worleyFBM(float3 uvw, float freq, uint seed) {
	float amplitude = 1;
	float noise = 0;

	//int i = 0;
	for (int i = 0; i < 5; i ++) {
		noise += worleyNoise(uvw, freq, seed) * amplitude;
		amplitude *= 0.5;
		freq *= 2;
	}

	return noise * 0.5;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= size || id.y >= size || id.y >= size) { return; }
	float3 texCoord = id / (size - 1.0);

	float worley = worleyFBM(texCoord, worleyScale, seed);
	float worley2 = worleyFBM(texCoord, worleyScale * 2, 0);//
	//worley = worleyNoise(texCoord, worleyScale);
	float fbm = abs(perlinfbm(texCoord, 4, 7));
	float worley_perlin = remap(0, 1, worley, 1, fbm);
	NoiseTexture[id] = float4(worley, fbm, worley_perlin, worley2);
}
